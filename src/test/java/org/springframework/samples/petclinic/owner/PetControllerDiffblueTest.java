package org.springframework.samples.petclinic.owner;

import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.forwardedUrl;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.model;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.redirectedUrl;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.view;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.ResultActions;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

/**
 * Unit tests for org.springframework.samples.petclinic.owner.PetController
 *
 * @author Diffblue Cover
 */

@RunWith(SpringRunner.class)
@ContextConfiguration(classes = PetController.class)
public class PetControllerDiffblueTest {

    @Rule
    public ExpectedException thrown = ExpectedException.none();

    @MockBean(name = "owners")
    private OwnerRepository owners;

    @MockBean(name = "pets")
    private PetRepository pets;

    @Autowired
    private PetController controller;

    @Test
    public void initCreationForm17() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(-1)))
            .andExpect(status().isOk())
            .andExpect(forwardedUrl("pets/createOrUpdatePetForm"))
            .andExpect(view().name("pets/createOrUpdatePetForm"));
    }

    @Test
    public void initCreationForm18() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(0)))
            .andExpect(status().isOk())
            .andExpect(forwardedUrl("pets/createOrUpdatePetForm"))
            .andExpect(view().name("pets/createOrUpdatePetForm"));
    }

    @Test
    public void initCreationForm19() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(1)))
            .andExpect(status().isOk())
            .andExpect(forwardedUrl("pets/createOrUpdatePetForm"))
            .andExpect(view().name("pets/createOrUpdatePetForm"));
    }

    @Test
    public void initCreationForm24() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("bar");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(1)))
            .andExpect(status().isOk())
            .andExpect(forwardedUrl("pets/createOrUpdatePetForm"))
            .andExpect(view().name("pets/createOrUpdatePetForm"));
    }

    @Test
    public void initCreationForm29() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("foo");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(1)))
            .andExpect(status().isOk())
            .andExpect(forwardedUrl("pets/createOrUpdatePetForm"))
            .andExpect(view().name("pets/createOrUpdatePetForm"));
    }

    @Test
    public void initCreationForm34() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(-1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(1)))
            .andExpect(status().isOk())
            .andExpect(forwardedUrl("pets/createOrUpdatePetForm"))
            .andExpect(view().name("pets/createOrUpdatePetForm"));
    }

    @Test
    public void initCreationForm37() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(0);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(1)))
            .andExpect(status().isOk())
            .andExpect(forwardedUrl("pets/createOrUpdatePetForm"))
            .andExpect(view().name("pets/createOrUpdatePetForm"));
    }

    @Test
    public void initCreationForm40() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(-1)))
            .andExpect(status().isOk())
            .andExpect(forwardedUrl("pets/createOrUpdatePetForm"))
            .andExpect(view().name("pets/createOrUpdatePetForm"));
    }

    @Test
    public void initCreationForm41() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(0)))
            .andExpect(status().isOk())
            .andExpect(forwardedUrl("pets/createOrUpdatePetForm"))
            .andExpect(view().name("pets/createOrUpdatePetForm"));
    }

    @Test
    public void initCreationForm42() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("");
        petType.setId(-1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(1)))
            .andExpect(status().isOk())
            .andExpect(forwardedUrl("pets/createOrUpdatePetForm"))
            .andExpect(view().name("pets/createOrUpdatePetForm"));
    }

    @Test
    public void initCreationForm45() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("");
        petType.setId(0);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(1)))
            .andExpect(status().isOk())
            .andExpect(forwardedUrl("pets/createOrUpdatePetForm"))
            .andExpect(view().name("pets/createOrUpdatePetForm"));
    }

    @Test
    public void initCreationForm48() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(-1)))
            .andExpect(status().isOk())
            .andExpect(forwardedUrl("pets/createOrUpdatePetForm"))
            .andExpect(view().name("pets/createOrUpdatePetForm"));
    }

    @Test
    public void initCreationForm49() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(0)))
            .andExpect(status().isOk())
            .andExpect(forwardedUrl("pets/createOrUpdatePetForm"))
            .andExpect(view().name("pets/createOrUpdatePetForm"));
    }

    @Test
    public void initCreationForm5() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(1)))
            .andExpect(status().isOk())
            .andExpect(forwardedUrl("pets/createOrUpdatePetForm"))
            .andExpect(view().name("pets/createOrUpdatePetForm"));
    }

    @Test
    public void initCreationForm50() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("bar");
        petType.setId(-1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(1)))
            .andExpect(status().isOk())
            .andExpect(forwardedUrl("pets/createOrUpdatePetForm"))
            .andExpect(view().name("pets/createOrUpdatePetForm"));
    }

    @Test
    public void initCreationForm53() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("bar");
        petType.setId(0);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(1)))
            .andExpect(status().isOk())
            .andExpect(forwardedUrl("pets/createOrUpdatePetForm"))
            .andExpect(view().name("pets/createOrUpdatePetForm"));
    }

    @Test
    public void initCreationForm56() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("bar");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(-1)))
            .andExpect(status().isOk())
            .andExpect(forwardedUrl("pets/createOrUpdatePetForm"))
            .andExpect(view().name("pets/createOrUpdatePetForm"));
    }

    @Test
    public void initCreationForm57() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("bar");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(0)))
            .andExpect(status().isOk())
            .andExpect(forwardedUrl("pets/createOrUpdatePetForm"))
            .andExpect(view().name("pets/createOrUpdatePetForm"));
    }

    @Test
    public void initCreationForm58() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("foo");
        petType.setId(-1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(1)))
            .andExpect(status().isOk())
            .andExpect(forwardedUrl("pets/createOrUpdatePetForm"))
            .andExpect(view().name("pets/createOrUpdatePetForm"));
    }

    @Test
    public void initCreationForm61() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("foo");
        petType.setId(0);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(1)))
            .andExpect(status().isOk())
            .andExpect(forwardedUrl("pets/createOrUpdatePetForm"))
            .andExpect(view().name("pets/createOrUpdatePetForm"));
    }

    @Test
    public void initCreationForm64() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("foo");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(-1)))
            .andExpect(status().isOk())
            .andExpect(forwardedUrl("pets/createOrUpdatePetForm"))
            .andExpect(view().name("pets/createOrUpdatePetForm"));
    }

    @Test
    public void initCreationForm65() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("foo");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(0)))
            .andExpect(status().isOk())
            .andExpect(forwardedUrl("pets/createOrUpdatePetForm"))
            .andExpect(view().name("pets/createOrUpdatePetForm"));
    }

    @Test
    public void initCreationForm66() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(-1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(-1)))
            .andExpect(status().isOk())
            .andExpect(forwardedUrl("pets/createOrUpdatePetForm"))
            .andExpect(view().name("pets/createOrUpdatePetForm"));
    }

    @Test
    public void initCreationForm67() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(-1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(0)))
            .andExpect(status().isOk())
            .andExpect(forwardedUrl("pets/createOrUpdatePetForm"))
            .andExpect(view().name("pets/createOrUpdatePetForm"));
    }

    @Test
    public void initCreationForm68() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(0);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(-1)))
            .andExpect(status().isOk())
            .andExpect(forwardedUrl("pets/createOrUpdatePetForm"))
            .andExpect(view().name("pets/createOrUpdatePetForm"));
    }

    @Test
    public void initCreationForm69() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(0);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(0)))
            .andExpect(status().isOk())
            .andExpect(forwardedUrl("pets/createOrUpdatePetForm"))
            .andExpect(view().name("pets/createOrUpdatePetForm"));
    }

    @Test
    public void initCreationForm70() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("");
        petType.setId(-1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(-1)))
            .andExpect(status().isOk())
            .andExpect(forwardedUrl("pets/createOrUpdatePetForm"))
            .andExpect(view().name("pets/createOrUpdatePetForm"));
    }

    @Test
    public void initCreationForm71() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("");
        petType.setId(-1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(0)))
            .andExpect(status().isOk())
            .andExpect(forwardedUrl("pets/createOrUpdatePetForm"))
            .andExpect(view().name("pets/createOrUpdatePetForm"));
    }

    @Test
    public void initCreationForm72() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("");
        petType.setId(0);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(-1)))
            .andExpect(status().isOk())
            .andExpect(forwardedUrl("pets/createOrUpdatePetForm"))
            .andExpect(view().name("pets/createOrUpdatePetForm"));
    }

    @Test
    public void initCreationForm73() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("");
        petType.setId(0);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(0)))
            .andExpect(status().isOk())
            .andExpect(forwardedUrl("pets/createOrUpdatePetForm"))
            .andExpect(view().name("pets/createOrUpdatePetForm"));
    }

    @Test
    public void initCreationForm74() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("bar");
        petType.setId(-1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(-1)))
            .andExpect(status().isOk())
            .andExpect(forwardedUrl("pets/createOrUpdatePetForm"))
            .andExpect(view().name("pets/createOrUpdatePetForm"));
    }

    @Test
    public void initCreationForm75() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("bar");
        petType.setId(-1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(0)))
            .andExpect(status().isOk())
            .andExpect(forwardedUrl("pets/createOrUpdatePetForm"))
            .andExpect(view().name("pets/createOrUpdatePetForm"));
    }

    @Test
    public void initCreationForm76() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("bar");
        petType.setId(0);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(-1)))
            .andExpect(status().isOk())
            .andExpect(forwardedUrl("pets/createOrUpdatePetForm"))
            .andExpect(view().name("pets/createOrUpdatePetForm"));
    }

    @Test
    public void initCreationForm77() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("bar");
        petType.setId(0);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(0)))
            .andExpect(status().isOk())
            .andExpect(forwardedUrl("pets/createOrUpdatePetForm"))
            .andExpect(view().name("pets/createOrUpdatePetForm"));
    }

    @Test
    public void initCreationForm78() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("foo");
        petType.setId(-1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(-1)))
            .andExpect(status().isOk())
            .andExpect(forwardedUrl("pets/createOrUpdatePetForm"))
            .andExpect(view().name("pets/createOrUpdatePetForm"));
    }

    @Test
    public void initCreationForm79() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("foo");
        petType.setId(-1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(0)))
            .andExpect(status().isOk())
            .andExpect(forwardedUrl("pets/createOrUpdatePetForm"))
            .andExpect(view().name("pets/createOrUpdatePetForm"));
    }

    @Test
    public void initCreationForm80() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("foo");
        petType.setId(0);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(-1)))
            .andExpect(status().isOk())
            .andExpect(forwardedUrl("pets/createOrUpdatePetForm"))
            .andExpect(view().name("pets/createOrUpdatePetForm"));
    }

    @Test
    public void initCreationForm81() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("foo");
        petType.setId(0);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(0)))
            .andExpect(status().isOk())
            .andExpect(forwardedUrl("pets/createOrUpdatePetForm"))
            .andExpect(view().name("pets/createOrUpdatePetForm"));
    }

    @Test
    public void initCreationForm9() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(1)))
            .andExpect(status().isOk())
            .andExpect(forwardedUrl("pets/createOrUpdatePetForm"))
            .andExpect(view().name("pets/createOrUpdatePetForm"));
    }

    @Test
    public void initCreationForm1() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(1)));
    }

    @Test
    public void initCreationForm10() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(1)));
    }

    @Test
    public void initCreationForm11() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("bar");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(1)));
    }

    @Test
    public void initCreationForm12() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("foo");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(1)));
    }

    @Test
    public void initCreationForm13() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(-1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(1)));
    }

    @Test
    public void initCreationForm14() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(0);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(1)));
    }

    @Test
    public void initCreationForm15() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(-1)));
    }

    @Test
    public void initCreationForm16() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(0)));
    }

    @Test
    public void initCreationForm2() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(1)));
    }

    @Test
    public void initCreationForm20() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("");
        petType.setId(-1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(1)));
    }

    @Test
    public void initCreationForm21() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("");
        petType.setId(0);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(1)));
    }

    @Test
    public void initCreationForm22() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(-1)));
    }

    @Test
    public void initCreationForm23() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(0)));
    }

    @Test
    public void initCreationForm25() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("bar");
        petType.setId(-1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(1)));
    }

    @Test
    public void initCreationForm26() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("bar");
        petType.setId(0);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(1)));
    }

    @Test
    public void initCreationForm27() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("bar");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(-1)));
    }

    @Test
    public void initCreationForm28() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("bar");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(0)));
    }

    @Test
    public void initCreationForm3() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(-1)));
    }

    @Test
    public void initCreationForm30() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("foo");
        petType.setId(-1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(1)));
    }

    @Test
    public void initCreationForm31() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("foo");
        petType.setId(0);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(1)));
    }

    @Test
    public void initCreationForm32() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("foo");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(-1)));
    }

    @Test
    public void initCreationForm33() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("foo");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(0)));
    }

    @Test
    public void initCreationForm35() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(-1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(-1)));
    }

    @Test
    public void initCreationForm36() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(-1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(0)));
    }

    @Test
    public void initCreationForm38() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(0);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(-1)));
    }

    @Test
    public void initCreationForm39() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(0);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(0)));
    }

    @Test
    public void initCreationForm4() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(0)));
    }

    @Test
    public void initCreationForm43() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("");
        petType.setId(-1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(-1)));
    }

    @Test
    public void initCreationForm44() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("");
        petType.setId(-1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(0)));
    }

    @Test
    public void initCreationForm46() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("");
        petType.setId(0);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(-1)));
    }

    @Test
    public void initCreationForm47() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("");
        petType.setId(0);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(0)));
    }

    @Test
    public void initCreationForm51() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("bar");
        petType.setId(-1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(-1)));
    }

    @Test
    public void initCreationForm52() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("bar");
        petType.setId(-1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(0)));
    }

    @Test
    public void initCreationForm54() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("bar");
        petType.setId(0);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(-1)));
    }

    @Test
    public void initCreationForm55() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("bar");
        petType.setId(0);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(0)));
    }

    @Test
    public void initCreationForm59() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("foo");
        petType.setId(-1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(-1)));
    }

    @Test
    public void initCreationForm6() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(1)));
    }

    @Test
    public void initCreationForm60() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("foo");
        petType.setId(-1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(0)));
    }

    @Test
    public void initCreationForm62() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("foo");
        petType.setId(0);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(-1)));
    }

    @Test
    public void initCreationForm63() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("foo");
        petType.setId(0);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(0)));
    }

    @Test
    public void initCreationForm7() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(-1)));
    }

    @Test
    public void initCreationForm8() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/new", Integer.toString(0)));
    }

    @Test
    public void processCreationForm1() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm10() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("id");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm100() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm101() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("id");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm102() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("redirect:/owners/{ownerId}");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm103() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm104() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm105() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm106() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("id");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm107() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("redirect:/owners/{ownerId}");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm108() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm109() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm11() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("redirect:/owners/{ownerId}");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm110() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm111() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("id");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm112() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("redirect:/owners/{ownerId}");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm113() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm114() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm115() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(2);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm116() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm117() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm118() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm119() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(2))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm12() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm120() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm121() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm122() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm123() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "id")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm124() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "redirect:/owners/{ownerId}")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm125() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm126() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm127() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(2).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm128() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm129() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm13() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm130() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm131() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "id")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm132() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "redirect:/owners/{ownerId}")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm133() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm134() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm135() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(2).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm136() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm137() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm138() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm139() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("id");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm14() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm140() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("redirect:/owners/{ownerId}");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm141() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm142() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm143() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm144() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("id");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm145() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("redirect:/owners/{ownerId}");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm146() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm147() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm148() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm149() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("id");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm15() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("id");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm150() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("redirect:/owners/{ownerId}");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm151() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm152() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm153() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm154() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("id");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm155() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("redirect:/owners/{ownerId}");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm156() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm157() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm158() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(2);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm159() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm16() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("redirect:/owners/{ownerId}");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm160() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm161() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm162() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(2))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm163() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm164() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm165() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm166() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "id")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm167() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "redirect:/owners/{ownerId}")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm168() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm169() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm17() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm170() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(2).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm171() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm172() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm173() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm174() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "id")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm175() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "redirect:/owners/{ownerId}")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm176() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm177() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm178() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(2).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm179() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("id");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm18() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm180() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("id");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm181() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("id");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm182() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("id");
        owner.setCity("id");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm183() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("id");
        owner.setCity("redirect:/owners/{ownerId}");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm184() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("id");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm185() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("id");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm186() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("id");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm187() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("id");
        owner.setCity("New York");
        owner.setTelephone("id");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm188() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("id");
        owner.setCity("New York");
        owner.setTelephone("redirect:/owners/{ownerId}");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm189() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("id");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm19() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm190() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("id");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm191() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("id");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm192() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("id");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("id");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm193() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("id");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("redirect:/owners/{ownerId}");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm194() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("id");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm195() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("id");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm196() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("id");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm197() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("id");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("id");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm198() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("id");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("redirect:/owners/{ownerId}");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm199() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("id");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm2() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm20() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("id");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm200() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("id");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm201() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("id");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(2);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm202() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("id");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm203() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("id");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm204() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("id");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm205() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("id");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(2))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm206() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("id");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm207() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("id");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm208() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("id");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm209() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("id");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "id")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm21() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("redirect:/owners/{ownerId}");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm210() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("id");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "redirect:/owners/{ownerId}")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm211() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("id");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm212() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("id");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm213() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("id");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(2).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm214() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("id");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm215() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("id");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm216() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("id");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm217() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("id");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "id")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm218() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("id");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "redirect:/owners/{ownerId}")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm219() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("id");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm22() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm220() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("id");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm221() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("id");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(2).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm222() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("redirect:/owners/{ownerId}");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm223() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("redirect:/owners/{ownerId}");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm224() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("redirect:/owners/{ownerId}");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm225() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("redirect:/owners/{ownerId}");
        owner.setCity("id");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm226() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("redirect:/owners/{ownerId}");
        owner.setCity("redirect:/owners/{ownerId}");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm227() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("redirect:/owners/{ownerId}");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm228() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("redirect:/owners/{ownerId}");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm229() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("redirect:/owners/{ownerId}");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm23() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm230() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("redirect:/owners/{ownerId}");
        owner.setCity("New York");
        owner.setTelephone("id");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm231() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("redirect:/owners/{ownerId}");
        owner.setCity("New York");
        owner.setTelephone("redirect:/owners/{ownerId}");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm232() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("redirect:/owners/{ownerId}");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm233() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("redirect:/owners/{ownerId}");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm234() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("redirect:/owners/{ownerId}");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm235() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("redirect:/owners/{ownerId}");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("id");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm236() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("redirect:/owners/{ownerId}");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("redirect:/owners/{ownerId}");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm237() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("redirect:/owners/{ownerId}");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm238() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("redirect:/owners/{ownerId}");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm239() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("redirect:/owners/{ownerId}");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm24() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm240() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("redirect:/owners/{ownerId}");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("id");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm241() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("redirect:/owners/{ownerId}");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("redirect:/owners/{ownerId}");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm242() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("redirect:/owners/{ownerId}");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm243() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("redirect:/owners/{ownerId}");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm244() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("redirect:/owners/{ownerId}");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(2);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm245() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("redirect:/owners/{ownerId}");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm246() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("redirect:/owners/{ownerId}");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm247() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("redirect:/owners/{ownerId}");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm248() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("redirect:/owners/{ownerId}");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(2))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm249() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("redirect:/owners/{ownerId}");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm25() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("id");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm250() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("redirect:/owners/{ownerId}");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm251() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("redirect:/owners/{ownerId}");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm252() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("redirect:/owners/{ownerId}");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "id")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm253() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("redirect:/owners/{ownerId}");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "redirect:/owners/{ownerId}")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm254() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("redirect:/owners/{ownerId}");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm255() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("redirect:/owners/{ownerId}");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm256() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("redirect:/owners/{ownerId}");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(2).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm257() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("redirect:/owners/{ownerId}");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm258() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("redirect:/owners/{ownerId}");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm259() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("redirect:/owners/{ownerId}");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm26() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("redirect:/owners/{ownerId}");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm260() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("redirect:/owners/{ownerId}");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "id")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm261() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("redirect:/owners/{ownerId}");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "redirect:/owners/{ownerId}")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm262() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("redirect:/owners/{ownerId}");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm263() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("redirect:/owners/{ownerId}");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm264() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("redirect:/owners/{ownerId}");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(2).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm265() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm266() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm267() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm268() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("");
        owner.setTelephone("id");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm269() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("");
        owner.setTelephone("redirect:/owners/{ownerId}");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm27() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm270() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm271() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm272() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm273() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("id");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm274() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("redirect:/owners/{ownerId}");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm275() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm276() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm277() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm278() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("id");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm279() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("redirect:/owners/{ownerId}");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm28() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm280() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm281() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm282() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(2);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm283() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm284() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm285() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm286() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(2))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm287() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm288() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm289() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm29() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(2);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm290() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "id")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm291() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "redirect:/owners/{ownerId}")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm292() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm293() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm294() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(2).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm295() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm296() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm297() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm298() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "id")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm299() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "redirect:/owners/{ownerId}")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm3() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm30() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm300() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm301() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm302() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(2).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm303() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("bar");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm304() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("bar");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm305() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("bar");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm306() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("bar");
        owner.setTelephone("id");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm307() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("bar");
        owner.setTelephone("redirect:/owners/{ownerId}");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm308() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm309() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm31() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm310() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm311() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("id");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm312() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("redirect:/owners/{ownerId}");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm313() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm314() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm315() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm316() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("id");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm317() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("redirect:/owners/{ownerId}");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm318() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm319() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm32() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm320() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(2);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm321() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm322() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm323() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm324() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(2))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm325() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm326() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm327() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm328() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "id")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm329() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "redirect:/owners/{ownerId}")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm33() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(2))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm330() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm331() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm332() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(2).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm333() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm334() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm335() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm336() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "id")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm337() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "redirect:/owners/{ownerId}")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm338() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm339() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm34() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm340() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(2).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm341() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("foo");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm342() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("foo");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm343() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("foo");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm344() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("foo");
        owner.setTelephone("id");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm345() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("foo");
        owner.setTelephone("redirect:/owners/{ownerId}");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm346() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm347() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm348() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm349() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("id");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm35() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm350() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("redirect:/owners/{ownerId}");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm351() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm352() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm353() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm354() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("id");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm355() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("redirect:/owners/{ownerId}");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm356() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm357() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm358() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(2);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm359() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm36() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm360() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm361() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm362() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(2))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm363() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm364() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm365() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm366() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "id")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm367() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "redirect:/owners/{ownerId}")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm368() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm369() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm37() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "id")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm370() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(2).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm371() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm372() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm373() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm374() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "id")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm375() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "redirect:/owners/{ownerId}")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm376() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm377() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm378() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(2).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm379() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("id");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm38() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "redirect:/owners/{ownerId}")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm380() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("id");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm381() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("id");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm382() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("id");
        owner.setTelephone("id");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm383() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("id");
        owner.setTelephone("redirect:/owners/{ownerId}");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm384() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("id");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm385() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("id");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm386() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("id");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm387() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("id");
        owner.setTelephone("12345");
        owner.setFirstName("id");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm388() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("id");
        owner.setTelephone("12345");
        owner.setFirstName("redirect:/owners/{ownerId}");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm389() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("id");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm39() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm390() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("id");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm391() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("id");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm392() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("id");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("id");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm393() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("id");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("redirect:/owners/{ownerId}");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm394() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("id");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm395() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("id");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm396() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("id");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(2);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm397() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("id");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm398() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("id");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm399() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("id");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm4() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm40() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm400() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("id");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(2))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm401() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("id");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm402() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("id");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm403() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("id");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm404() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("id");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "id")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm405() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("id");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "redirect:/owners/{ownerId}")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm406() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("id");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm407() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("id");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm408() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("id");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(2).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm409() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("id");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm41() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(2).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm410() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("id");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm411() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("id");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm412() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("id");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "id")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm413() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("id");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "redirect:/owners/{ownerId}")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm414() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("id");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm415() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("id");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm416() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("id");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(2).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm417() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("redirect:/owners/{ownerId}");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm418() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("redirect:/owners/{ownerId}");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm419() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("redirect:/owners/{ownerId}");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm42() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm420() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("redirect:/owners/{ownerId}");
        owner.setTelephone("id");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm421() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("redirect:/owners/{ownerId}");
        owner.setTelephone("redirect:/owners/{ownerId}");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm422() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("redirect:/owners/{ownerId}");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm423() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("redirect:/owners/{ownerId}");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm424() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("redirect:/owners/{ownerId}");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm425() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("redirect:/owners/{ownerId}");
        owner.setTelephone("12345");
        owner.setFirstName("id");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm426() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("redirect:/owners/{ownerId}");
        owner.setTelephone("12345");
        owner.setFirstName("redirect:/owners/{ownerId}");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm427() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("redirect:/owners/{ownerId}");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm428() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("redirect:/owners/{ownerId}");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm429() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("redirect:/owners/{ownerId}");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm43() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm430() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("redirect:/owners/{ownerId}");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("id");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm431() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("redirect:/owners/{ownerId}");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("redirect:/owners/{ownerId}");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm432() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("redirect:/owners/{ownerId}");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm433() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("redirect:/owners/{ownerId}");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm434() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("redirect:/owners/{ownerId}");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(2);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm435() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("redirect:/owners/{ownerId}");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm436() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("redirect:/owners/{ownerId}");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm437() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("redirect:/owners/{ownerId}");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm438() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("redirect:/owners/{ownerId}");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(2))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm439() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("redirect:/owners/{ownerId}");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm44() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm440() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("redirect:/owners/{ownerId}");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm441() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("redirect:/owners/{ownerId}");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm442() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("redirect:/owners/{ownerId}");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "id")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm443() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("redirect:/owners/{ownerId}");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "redirect:/owners/{ownerId}")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm444() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("redirect:/owners/{ownerId}");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm445() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("redirect:/owners/{ownerId}");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm446() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("redirect:/owners/{ownerId}");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(2).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm447() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("redirect:/owners/{ownerId}");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm448() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("redirect:/owners/{ownerId}");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm449() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("redirect:/owners/{ownerId}");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm45() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "id")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm450() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("redirect:/owners/{ownerId}");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "id")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm451() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("redirect:/owners/{ownerId}");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "redirect:/owners/{ownerId}")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm452() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("redirect:/owners/{ownerId}");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm453() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("redirect:/owners/{ownerId}");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm454() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("redirect:/owners/{ownerId}");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(2).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm455() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm456() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm457() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm458() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("id");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm459() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("redirect:/owners/{ownerId}");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm46() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "redirect:/owners/{ownerId}")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm460() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm461() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm462() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm463() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("id");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm464() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("redirect:/owners/{ownerId}");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm465() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm466() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm467() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(2);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm468() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm469() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm47() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm470() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm471() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(2))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm472() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm473() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm474() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm475() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "id")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm476() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "redirect:/owners/{ownerId}")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm477() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm478() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm479() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(2).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm48() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm480() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm481() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm482() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm483() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "id")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm484() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "redirect:/owners/{ownerId}")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm485() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm486() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm487() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(2).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm488() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm489() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm49() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(2).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm490() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm491() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("id");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm492() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("redirect:/owners/{ownerId}");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm493() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm494() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm495() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm496() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("id");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm497() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("redirect:/owners/{ownerId}");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm498() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm499() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm5() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("id");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm50() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm500() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(2);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm501() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm502() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm503() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm504() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(2))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm505() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm506() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm507() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm508() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "id")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm509() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "redirect:/owners/{ownerId}")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm51() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm510() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm511() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm512() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(2).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm513() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm514() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm515() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm516() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "id")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm517() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "redirect:/owners/{ownerId}")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm518() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm519() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm52() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm520() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(2).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm521() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm522() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm523() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm524() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("id");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm525() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("redirect:/owners/{ownerId}");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm526() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm527() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm528() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm529() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("id");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm53() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("id");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm530() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("redirect:/owners/{ownerId}");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm531() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm532() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm533() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(2);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm534() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm535() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm536() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm537() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(2))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm538() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm539() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm54() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("redirect:/owners/{ownerId}");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm540() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm541() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "id")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm542() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "redirect:/owners/{ownerId}")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm543() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm544() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm545() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(2).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm546() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm547() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm548() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm549() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "id")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm55() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm550() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "redirect:/owners/{ownerId}")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm551() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm552() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm553() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(2).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm554() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("id");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm555() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("id");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm556() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("id");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm557() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("id");
        owner.setFirstName("id");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm558() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("id");
        owner.setFirstName("redirect:/owners/{ownerId}");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm559() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("id");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm56() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm560() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("id");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm561() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("id");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm562() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("id");
        owner.setFirstName("Anna");
        owner.setLastName("id");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm563() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("id");
        owner.setFirstName("Anna");
        owner.setLastName("redirect:/owners/{ownerId}");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm564() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("id");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm565() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("id");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm566() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("id");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(2);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm567() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("id");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm568() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("id");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm569() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("id");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm57() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm570() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("id");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(2))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm571() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("id");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm572() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("id");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm573() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("id");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm574() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("id");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "id")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm575() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("id");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "redirect:/owners/{ownerId}")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm576() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("id");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm577() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("id");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm578() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("id");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(2).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm579() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("id");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm58() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("id");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm580() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("id");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm581() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("id");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm582() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("id");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "id")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm583() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("id");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "redirect:/owners/{ownerId}")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm584() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("id");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm585() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("id");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm586() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("id");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(2).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm587() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("redirect:/owners/{ownerId}");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm588() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("redirect:/owners/{ownerId}");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm589() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("redirect:/owners/{ownerId}");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm59() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("redirect:/owners/{ownerId}");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm590() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("redirect:/owners/{ownerId}");
        owner.setFirstName("id");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm591() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("redirect:/owners/{ownerId}");
        owner.setFirstName("redirect:/owners/{ownerId}");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm592() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("redirect:/owners/{ownerId}");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm593() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("redirect:/owners/{ownerId}");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm594() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("redirect:/owners/{ownerId}");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm595() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("redirect:/owners/{ownerId}");
        owner.setFirstName("Anna");
        owner.setLastName("id");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm596() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("redirect:/owners/{ownerId}");
        owner.setFirstName("Anna");
        owner.setLastName("redirect:/owners/{ownerId}");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm597() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("redirect:/owners/{ownerId}");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm598() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("redirect:/owners/{ownerId}");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm599() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("redirect:/owners/{ownerId}");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(2);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm6() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("redirect:/owners/{ownerId}");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm60() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm600() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("redirect:/owners/{ownerId}");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm601() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("redirect:/owners/{ownerId}");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm602() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("redirect:/owners/{ownerId}");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm603() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("redirect:/owners/{ownerId}");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(2))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm604() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("redirect:/owners/{ownerId}");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm605() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("redirect:/owners/{ownerId}");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm606() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("redirect:/owners/{ownerId}");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm607() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("redirect:/owners/{ownerId}");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "id")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm608() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("redirect:/owners/{ownerId}");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "redirect:/owners/{ownerId}")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm609() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("redirect:/owners/{ownerId}");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm61() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm610() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("redirect:/owners/{ownerId}");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm611() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("redirect:/owners/{ownerId}");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(2).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm612() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("redirect:/owners/{ownerId}");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm613() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("redirect:/owners/{ownerId}");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm614() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("redirect:/owners/{ownerId}");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm615() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("redirect:/owners/{ownerId}");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "id")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm616() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("redirect:/owners/{ownerId}");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "redirect:/owners/{ownerId}")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm617() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("redirect:/owners/{ownerId}");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm618() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("redirect:/owners/{ownerId}");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm619() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("redirect:/owners/{ownerId}");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(2).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm62() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm620() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm621() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm622() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm623() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("id");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm624() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("redirect:/owners/{ownerId}");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm625() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm626() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm627() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(2);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm628() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm629() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm63() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("id");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm630() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm631() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(2))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm632() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm633() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm634() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm635() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "id")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm636() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "redirect:/owners/{ownerId}")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm637() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm638() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm639() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(2).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm64() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("redirect:/owners/{ownerId}");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm640() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm641() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm642() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm643() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "id")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm644() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "redirect:/owners/{ownerId}")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm645() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm646() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm647() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(2).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm65() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm66() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm67() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm68() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("id");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm69() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("redirect:/owners/{ownerId}");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm7() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm70() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm71() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm72() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(2);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm73() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm74() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm75() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm76() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(2))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm77() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm78() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm79() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm8() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm80() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "id")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm81() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "redirect:/owners/{ownerId}")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm82() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm83() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm84() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(2).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm85() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm86() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm87() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm88() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "id")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm89() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "redirect:/owners/{ownerId}")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm9() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm90() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm91() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm92() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(2).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm93() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm94() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm95() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm96() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("id");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm97() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("redirect:/owners/{ownerId}");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm98() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationForm99() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", java.time.LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processCreationFormThrowsNestedServletException1() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException10() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException100() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException101() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException102() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException103() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException104() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException105() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException106() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException107() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException108() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException109() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException11() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException110() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException111() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException112() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException113() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException114() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException115() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException116() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException117() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException118() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException119() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException12() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException120() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException121() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException122() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException123() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException124() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException125() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException126() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException127() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException128() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException129() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException13() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException130() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException131() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException132() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException133() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException134() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException135() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException136() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException137() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException138() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException139() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException14() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException140() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException141() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException142() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException143() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException144() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException145() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException146() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException147() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException148() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException149() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException15() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException150() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException151() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException152() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException153() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException154() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException155() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException156() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException157() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException158() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException159() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException16() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException160() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException161() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException162() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException163() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException164() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException165() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException166() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException167() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException168() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException169() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException17() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException170() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException171() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException172() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException173() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException174() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException175() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException176() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException177() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException178() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException179() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException18() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException180() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException181() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException182() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException183() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException184() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException185() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException186() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException187() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException188() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException189() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException19() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException190() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException191() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException192() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException193() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException194() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException195() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException196() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException197() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException198() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException199() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException2() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException20() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException200() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException201() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException202() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException203() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException204() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException205() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException206() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException207() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException208() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException209() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException21() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException210() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException211() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException212() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException213() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException214() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException215() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException216() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException217() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException218() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException219() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException22() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException220() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException221() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException222() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException223() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException224() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException225() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException226() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException227() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException228() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException229() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException23() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException230() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException231() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException232() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException233() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException234() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException235() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException236() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException237() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException238() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException239() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException24() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException240() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException241() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException242() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException243() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException244() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException245() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException246() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException247() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException248() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException249() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException25() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException250() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException251() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException252() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException253() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException254() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException255() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException256() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException257() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException258() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException259() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException26() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException260() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException261() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException262() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException263() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException264() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException265() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException266() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException267() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException268() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException269() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException27() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException270() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException271() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException272() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException273() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException274() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException275() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException276() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException277() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException278() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException279() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException28() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException280() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException281() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException282() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException283() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException284() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException285() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException286() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException287() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException288() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException289() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException29() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException290() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException291() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException292() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException3() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException30() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException31() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException32() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException33() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException34() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException35() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException36() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException37() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException38() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException39() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException4() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException40() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException41() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException42() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException43() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException44() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException45() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException46() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException47() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException48() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException49() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException5() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException50() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException51() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException52() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException53() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException54() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException55() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException56() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException57() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException58() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException59() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException6() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException60() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException61() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException62() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException63() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException64() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException65() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException66() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException67() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException68() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException69() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException7() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException70() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException71() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException72() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException73() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException74() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException75() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException76() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException77() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException78() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException79() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException8() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException80() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException81() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException82() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException83() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException84() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException85() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException86() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("bar");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException87() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("foo");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException88() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(-1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException89() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(0);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException9() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException90() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(-1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException91() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(0))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException92() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException93() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException94() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException95() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException96() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException97() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException98() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processCreationFormThrowsNestedServletException99() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/new", Integer.toString(1))
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void initUpdateForm34() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)))
            .andExpect(status().isOk())
            .andExpect(forwardedUrl("pets/createOrUpdatePetForm"))
            .andExpect(view().name("pets/createOrUpdatePetForm"));
    }

    @Test
    public void initUpdateForm67() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)))
            .andExpect(status().isOk())
            .andExpect(forwardedUrl("pets/createOrUpdatePetForm"))
            .andExpect(view().name("pets/createOrUpdatePetForm"));
    }

    @Test
    public void initUpdateForm87() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)))
            .andExpect(status().isOk())
            .andExpect(forwardedUrl("pets/createOrUpdatePetForm"))
            .andExpect(view().name("pets/createOrUpdatePetForm"));
    }

    @Test
    public void initUpdateForm1() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm10() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm100() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm101() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm102() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm103() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm104() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm105() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm106() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm107() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm108() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm109() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm11() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm110() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm111() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm112() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm113() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm114() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm115() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm116() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm117() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm118() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm119() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm12() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm120() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm121() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm122() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm123() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm124() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm125() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm126() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm127() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm128() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm129() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm13() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm130() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("bar");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm131() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("bar");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm132() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("bar");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm133() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm134() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm135() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm136() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm137() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm138() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm139() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm14() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm140() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm141() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm142() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm143() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm144() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm145() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm146() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm147() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("foo");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm148() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("foo");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm149() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("foo");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm15() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm150() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm151() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm152() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm153() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm154() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm155() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm156() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm157() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm158() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm159() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm16() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm160() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm161() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm162() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm163() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm164() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm165() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm166() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm167() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm168() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm169() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm17() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm170() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm171() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm172() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm173() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm174() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm175() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm176() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm177() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm178() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm179() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm18() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm180() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm181() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm182() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm183() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm184() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm185() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm186() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm187() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm188() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm189() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm19() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm190() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm191() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm192() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm193() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm194() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm195() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm196() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm197() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm198() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm199() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm2() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm20() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm200() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm201() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm202() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm203() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm204() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm205() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm206() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm207() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm208() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm209() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm21() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm210() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm211() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm212() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm213() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm214() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm215() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm216() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm217() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm218() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm219() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm22() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm220() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm221() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm222() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm223() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm224() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm225() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm226() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm227() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm228() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm229() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm23() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm230() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm231() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm232() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm233() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm234() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm235() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm236() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm237() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm238() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm239() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm24() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm240() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm241() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm242() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm243() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm244() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm245() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm246() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm247() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm248() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm249() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm25() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm250() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm251() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm252() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm253() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm254() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm255() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm256() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm257() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm258() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm259() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm26() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm260() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm261() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm262() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm263() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm264() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm265() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm266() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm267() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm268() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm269() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm27() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm270() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm271() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm272() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm273() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm274() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm275() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm276() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm277() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("bar");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm278() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("foo");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm279() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(-1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm28() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm280() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(0);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm281() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm282() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm283() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm284() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm285() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm286() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm287() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm288() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm289() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm29() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm290() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm291() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm292() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm293() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("");
        petType.setId(-1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm294() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("");
        petType.setId(0);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm295() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm296() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm297() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm298() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm299() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("bar");
        petType.setId(-1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm3() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm30() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm300() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("bar");
        petType.setId(0);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm301() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("bar");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm302() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("bar");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm303() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("bar");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm304() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("bar");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm305() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("foo");
        petType.setId(-1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm306() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("foo");
        petType.setId(0);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm307() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("foo");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm308() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("foo");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm309() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("foo");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm31() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm310() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("foo");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm311() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(-1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm312() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(-1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm313() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(-1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm314() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(-1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm315() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(0);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm316() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(0);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm317() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(0);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm318() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(0);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm319() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm32() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm320() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm321() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm322() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm323() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm324() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm325() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm326() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm327() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm328() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm329() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm33() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm330() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm331() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm332() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm333() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm334() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm335() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm336() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm337() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm338() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm339() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm340() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("bar");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm341() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("bar");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm342() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("bar");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm343() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm344() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm345() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm346() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm347() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm348() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm349() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm35() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm350() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm351() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm352() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm353() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm354() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm355() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm356() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm357() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("foo");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm358() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("foo");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm359() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("foo");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm36() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm360() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm361() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm362() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm363() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm364() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm365() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm366() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm367() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm368() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm369() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm37() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm370() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm371() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm372() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm373() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm374() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm375() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm376() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm377() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm378() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm379() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm38() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm380() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm381() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm382() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm383() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm384() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm385() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm386() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm387() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm388() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm389() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm39() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm390() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm391() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm392() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm393() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm394() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm395() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm396() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm397() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm398() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm399() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm4() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm40() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm400() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm401() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm402() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm403() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm404() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm405() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm406() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm407() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm408() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm409() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm41() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("bar");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm410() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm411() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm412() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm413() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm414() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm415() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm416() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm417() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm418() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm419() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm42() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("foo");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm420() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm421() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm422() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm423() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm424() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm425() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm426() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm427() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm428() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm429() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm43() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(-1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm430() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm431() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm432() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm433() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm434() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm435() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm436() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm437() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm438() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm439() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm44() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(0);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm440() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm441() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm442() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm443() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm444() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm445() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm446() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm447() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm448() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm449() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm45() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm450() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm451() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm452() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm453() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm454() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm455() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm456() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm457() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm458() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm459() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm46() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm460() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm461() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm462() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm463() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm464() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm465() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm466() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm467() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm468() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm469() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm47() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm470() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm471() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm472() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm473() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm474() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm475() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm476() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm477() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm478() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm479() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm48() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm480() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm481() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm482() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm483() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm484() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm485() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm486() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm487() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("bar");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm488() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("foo");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm489() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(-1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm49() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm490() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(0);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm491() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm492() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm493() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm494() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm495() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm496() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm497() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm498() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm499() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm5() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm50() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm500() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm501() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm502() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm503() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm504() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm505() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm506() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm507() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm508() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm509() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm51() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm510() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm511() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm512() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm513() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm514() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm515() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm516() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm517() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm518() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm519() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm52() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm520() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("bar");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm521() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("bar");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm522() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("bar");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm523() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm524() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm525() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm526() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm527() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm528() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm529() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm53() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm530() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm531() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm532() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm533() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm534() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm535() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm536() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm537() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("foo");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm538() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("foo");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm539() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("foo");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm54() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm540() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm541() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm542() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm543() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm544() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm545() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm546() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm547() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm548() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm549() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm55() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm550() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm551() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm552() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm553() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm554() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm555() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm556() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm557() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm558() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm559() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm56() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm560() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm561() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm562() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm563() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm564() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm565() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm566() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm567() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm568() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm569() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm57() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm570() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm571() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm572() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm573() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm574() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm575() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm576() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm577() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm578() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm579() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm58() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm580() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm581() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm582() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm583() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm584() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm585() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm586() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm587() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm588() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm589() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm59() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm590() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm591() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm592() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm593() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm594() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm595() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm596() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm597() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm598() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm599() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm6() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm60() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm600() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm601() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm602() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm603() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm604() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm605() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm606() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm607() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm608() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm609() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm61() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm610() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm611() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm612() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm613() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm614() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm615() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm616() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm617() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm618() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm619() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm62() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm620() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm621() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm622() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm623() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm624() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm625() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm626() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm627() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm628() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm629() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm63() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm630() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm631() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm632() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm633() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm634() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm635() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm636() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm637() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm638() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm639() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm64() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm640() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm641() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm642() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm643() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm644() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm645() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm646() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm647() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm648() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm649() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm65() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm650() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm651() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm652() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm653() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm654() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm655() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm656() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm657() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm658() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm659() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm66() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm660() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm661() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm662() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm663() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm664() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm665() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm666() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm667() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("bar");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm668() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("foo");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm669() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(-1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm670() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(0);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm671() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm672() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm673() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm674() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm675() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm676() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm677() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm678() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm679() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm68() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm680() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm681() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm682() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm683() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm684() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm685() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm686() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm687() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm688() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm689() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm69() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm690() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm691() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm692() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm693() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm694() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm695() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm696() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm697() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm698() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm699() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm7() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm70() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm700() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("bar");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm701() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("bar");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm702() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("bar");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm703() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm704() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm705() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm706() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm707() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm708() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm709() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm71() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm710() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm711() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm712() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm713() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm714() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm715() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm716() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm717() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("foo");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm718() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("foo");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm719() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("foo");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm72() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm720() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm721() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm722() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm723() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm724() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm725() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm726() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm727() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm728() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm729() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm73() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm730() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm731() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm732() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm733() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm734() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm735() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm736() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm737() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm738() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm739() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm74() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm740() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm741() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm742() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm743() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm744() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm745() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm746() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm747() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm748() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm749() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm75() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm750() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm751() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm752() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm753() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm754() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm755() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm756() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm757() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm758() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm759() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm76() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm760() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm761() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm762() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm763() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm764() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm765() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm766() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm767() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm768() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm769() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm77() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm770() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm771() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm772() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm773() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm774() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm775() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm776() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm777() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm778() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm779() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm78() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm780() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm781() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm782() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm783() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm784() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm785() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm786() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm787() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm788() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm789() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm79() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm790() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm791() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm792() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm793() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm794() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm795() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm796() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm797() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm798() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm799() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm8() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm80() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm800() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm801() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm802() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm803() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        Pet pet = new Pet();
        pet.setBirthDate(LocalDate.of(2_000, 1, 1));
        PetType type = new PetType();
        type.setName("dog");
        type.setId(1);
        pet.setType(type);
        pet.setName("Bella");
        pet.setId(1);
        when(pets.findById(Mockito.<Integer>any()))
            .thenReturn(pet);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm804() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm805() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm806() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm807() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm808() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm81() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm82() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm83() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm84() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm85() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm86() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm88() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm89() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm9() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm90() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm91() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(-1)));
    }

    @Test
    public void initUpdateForm92() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(0)));
    }

    @Test
    public void initUpdateForm93() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm94() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm95() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm96() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm97() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm98() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void initUpdateForm99() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.get("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), Integer.toString(1)));
    }

    @Test
    public void processUpdateForm128() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processUpdateForm129() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("bar");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processUpdateForm130() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("foo");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processUpdateForm131() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("id");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processUpdateForm132() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("redirect:/owners/{ownerId}");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processUpdateForm133() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processUpdateForm134() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("bar");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processUpdateForm135() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("foo");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processUpdateForm136() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("id");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processUpdateForm137() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("redirect:/owners/{ownerId}");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processUpdateForm138() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processUpdateForm139() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("bar");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processUpdateForm140() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("foo");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processUpdateForm141() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("id");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processUpdateForm142() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("redirect:/owners/{ownerId}");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processUpdateForm143() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processUpdateForm144() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("bar");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processUpdateForm145() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("foo");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processUpdateForm146() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("id");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processUpdateForm147() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("redirect:/owners/{ownerId}");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processUpdateForm148() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processUpdateForm149() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("bar");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processUpdateForm150() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("foo");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processUpdateForm151() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("id");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processUpdateForm152() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("redirect:/owners/{ownerId}");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processUpdateForm153() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(-1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processUpdateForm154() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(0);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processUpdateForm155() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(2);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processUpdateForm156() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processUpdateForm157() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processUpdateForm158() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processUpdateForm159() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(2), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processUpdateForm160() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processUpdateForm161() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processUpdateForm162() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processUpdateForm163() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "id")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processUpdateForm164() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "redirect:/owners/{ownerId}")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processUpdateForm165() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processUpdateForm166() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processUpdateForm167() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processUpdateForm168() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "id")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processUpdateForm169() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "redirect:/owners/{ownerId}")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processUpdateForm170() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processUpdateForm171() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processUpdateForm172() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(2).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processUpdateForm173() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processUpdateForm174() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processUpdateForm175() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processUpdateForm176() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "id")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processUpdateForm177() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "redirect:/owners/{ownerId}")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processUpdateForm178() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processUpdateForm179() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processUpdateForm18() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processUpdateForm180() throws Exception {
        Owner owner = new Owner();
        owner.setAddress("280 Broadway");
        owner.setCity("New York");
        owner.setTelephone("12345");
        owner.setFirstName("Anna");
        owner.setLastName("Smith");
        owner.setId(1);
        when(owners.findById(Mockito.<Integer>any()))
            .thenReturn(owner);
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(2).toString()))
            .andExpect(status().is(302))
            .andExpect(redirectedUrl("/owners/1"))
            .andExpect(view().name("redirect:/owners/{ownerId}"));
    }

    @Test
    public void processUpdateForm22() throws Exception {
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(404));
    }

    @Test
    public void processUpdateForm35() throws Exception {
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(404));
    }

    @Test
    public void processUpdateForm48() throws Exception {
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(404));
    }

    @Test
    public void processUpdateForm5() throws Exception {
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(404));
    }

    @Test
    public void processUpdateForm81() throws Exception {
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(404));
    }

    @Test
    public void processUpdateForm89() throws Exception {
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(404));
    }

    @Test
    public void processUpdateForm97() throws Exception {
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()))
            .andExpect(status().is(404));
    }

    @Test
    public void processUpdateForm1() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm10() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm100() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm101() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm102() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm103() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm104() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm105() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm106() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm107() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm108() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm109() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm11() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm110() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm111() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm112() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm113() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm114() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm115() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm116() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm117() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm118() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm119() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm12() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm120() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm121() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm122() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm123() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm124() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm125() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm126() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm127() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm13() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm14() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm15() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm16() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm17() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm181() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm182() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("bar");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm183() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("foo");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm184() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(-1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm185() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(0);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm186() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm187() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm188() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm189() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm19() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm190() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm191() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm192() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm193() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm194() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm195() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm196() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm197() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm198() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm199() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm2() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm20() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm200() throws Exception {
        List<PetType> list = new ArrayList<PetType>();
        PetType petType = new PetType();
        petType.setName("dog");
        petType.setId(1);
        list.add(petType);
        when(pets.findPetTypes())
            .thenReturn(list);
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm201() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm202() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm203() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm204() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm205() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm206() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm207() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm208() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm209() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm21() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm210() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm211() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm212() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm213() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm214() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm215() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm216() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm217() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm218() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm219() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm220() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm221() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm222() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm223() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm224() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm225() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm226() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm227() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm228() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm229() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm23() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm230() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm231() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm232() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm233() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm234() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm235() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm236() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm237() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm238() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm239() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm24() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm240() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm241() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm242() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm243() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm244() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm245() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm246() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm247() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm248() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm249() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm25() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm250() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm251() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm252() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm253() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm254() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm255() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm256() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm257() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm258() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm259() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm26() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm260() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm261() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm262() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm263() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm264() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm265() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm266() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm267() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm268() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm269() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm27() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm270() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm271() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm272() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm273() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm274() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm275() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm276() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm277() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm278() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm279() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm28() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm280() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm281() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm282() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm283() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm284() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm285() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm286() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm287() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm288() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm289() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm29() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm290() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm291() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm292() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm293() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm294() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm295() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm296() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm297() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm298() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm299() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm3() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm30() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm300() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm301() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm302() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm303() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm304() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm305() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm306() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm307() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm308() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm309() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm31() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm310() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm311() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm312() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm313() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm314() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm315() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm316() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm317() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm318() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm319() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm32() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm320() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm321() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm322() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm323() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm324() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm325() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm326() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm327() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm328() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm329() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm33() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm330() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm331() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm332() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm333() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm334() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm335() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm336() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm337() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm338() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm339() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm34() throws Exception {
        when(pets.findPetTypes())
            .thenReturn(new ArrayList<PetType>());
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm340() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm341() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm342() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm343() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm344() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm345() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm346() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm347() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm348() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm349() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm350() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm351() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm352() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm353() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm354() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm355() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm356() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm357() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm358() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm359() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm36() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm360() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm361() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm362() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm363() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm364() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm365() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm366() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm367() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm368() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm369() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm37() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm370() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm371() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm372() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm373() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm374() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm375() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm376() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm377() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm378() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm379() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm38() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm380() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm381() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm382() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm383() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm384() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm385() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm386() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm387() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm388() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm389() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm39() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm390() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm391() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm392() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm393() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm394() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm395() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm396() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm397() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm398() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm399() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm4() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm40() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm400() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm401() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm402() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm403() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm404() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm405() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm406() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm407() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm408() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm409() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm41() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm410() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm411() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm412() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm413() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm414() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm415() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm416() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm417() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm418() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm419() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm42() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm420() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm421() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm422() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm423() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm424() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm425() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm426() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm427() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm428() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm429() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm43() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm430() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm431() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm432() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm433() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm434() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm435() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm436() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm437() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm438() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm439() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm44() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm440() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm441() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm442() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm443() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm444() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm445() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm446() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm447() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm448() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm449() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm45() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm450() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm451() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm452() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm453() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm454() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm455() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm456() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm457() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm458() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm459() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm46() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm460() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm461() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm462() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm463() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm464() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm465() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm466() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm467() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm468() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm469() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm47() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(-1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm470() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm471() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm472() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm473() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm474() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm475() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm476() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm477() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm478() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm479() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm480() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm481() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm482() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm483() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm484() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm485() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm486() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm487() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm488() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm489() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm49() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm490() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm491() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm492() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm493() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm494() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm495() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm496() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm497() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm498() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm499() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm50() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm500() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm501() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm502() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm503() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm504() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm505() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm506() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm507() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm508() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm509() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm51() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm510() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm511() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm512() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm513() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm514() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm515() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm516() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm517() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm518() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm519() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm52() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm520() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm521() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm522() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm523() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm524() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm525() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm526() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm527() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm528() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm529() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm53() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm530() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm531() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm532() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm533() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm534() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm535() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm536() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm537() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm538() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm539() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm54() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm540() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm541() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm542() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm543() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm544() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm545() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm546() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm547() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm548() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm549() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm55() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm550() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm551() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm552() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm553() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm554() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm555() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm556() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm557() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm558() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm559() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm56() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm560() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm561() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm562() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm563() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm564() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm565() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm57() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm58() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm59() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm6() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm60() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(0), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm61() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm62() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm63() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm64() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm65() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm66() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm67() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm68() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm69() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm7() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm70() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "bar")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm71() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm72() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm73() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm74() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm75() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm76() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm77() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm78() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm79() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm8() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm80() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "foo")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "dog")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm82() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm83() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm84() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm85() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm86() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm87() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm88() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm9() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm90() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm91() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm92() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm93() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "bar")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm94() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "foo")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm95() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(-1).toString()));
    }

    @Test
    public void processUpdateForm96() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "bar")
                .param("type.id", Integer.valueOf(1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(0).toString()));
    }

    @Test
    public void processUpdateForm98() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(-1).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }

    @Test
    public void processUpdateForm99() throws Exception {
        // Handler dispatch failed; nested exception is com.diffblue.jcover.MissingMockException
        thrown.expect(org.springframework.web.util.NestedServletException.class);
        MockMvcBuilders.standaloneSetup(controller).build().perform(
            MockMvcRequestBuilders.post("/owners/{ownerId}/pets/{petId}/edit", Integer.toString(1), "Bella")
                .param("birthDate", LocalDate.of(2_000, 1, 1).toString())
                .param("type.name", "foo")
                .param("type.id", Integer.valueOf(0).toString())
                .param("name", "/bin/bash")
                .param("id", Integer.valueOf(1).toString()));
    }
}
